{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ap_func_aad_key_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "ap_func_aad_key_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "ap_func_aad_name_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "ap_func_aad_name_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "luis_subscription_key_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "luis_subscription_key_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "speech_api_key_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "speech_api_key_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "storage_access_key_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "storage_access_key_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "storage_read_access_key_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "storage_read_access_key_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "twilioaccountphonenumber_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "twilioaccountphonenumber_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "twilioaccountssid_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "twilioaccountssid_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "twilioaccounttoken_secret_name": {
      "defaultValue": null,
      "type": "String"
    },
    "twilioaccounttoken_secret_value": {
      "defaultValue": null,
      "type": "String"
    },
    "aadaudience_variable": {
      "defaultValue": null,
      "type": "String"
    },
    "aadclientid_variable": {
      "defaultValue": null,
      "type": "String"
    },
    "sites_ap_wu_func_name": {
      "defaultValue": "ap-wu-func",
      "type": "String"
    },
    "servicebus_Connection_Name": {
      "defaultValue": "servicebus",
      "type": "String"
    },
    "serverfarms_WestUS2Plan_name": {
      "defaultValue": "WestUS2Plan",
      "type": "String"
    },
    "vaults_ap_wu_keyvault_name": {
      "defaultValue": "ap-wu-keyvault",
      "type": "String"
    },
    "storageAccounts_apwustorage_name": {
      "defaultValue": "apwustorage",
      "type": "String"
    },
    "components_ap_eu_appInsights_name": {
      "defaultValue": "ap-eu-appInsights",
      "type": "String"
    },
    "workflows_ap_process_wu_logicapp_name": {
      "defaultValue": "ap-process-wu-logicapp",
      "type": "String"
    },
    "workflows_ap_request_wu_logicapp_name": {
      "defaultValue": "ap-request-wu-logicapp",
      "type": "String"
    },
    "accounts_ap_wu_luisapp_name": {
      "defaultValue": "ap-wu-luisapp",
      "type": "String"
    },
    "namespaces_ap_wu_messagingbus_name": {
      "defaultValue": "ap-wu-messagingbus",
      "type": "String"
    },
    "workspaces_ap_wu_loganalytics_name": {
      "defaultValue": "ap-wu-loganalytics",
      "type": "String"
    },
    "accounts_ap_wu_speech_cognitivesvc_name": {
      "defaultValue": "ap-wu-speech-cognitivesvc",
      "type": "String"
    },
    "ap_function_app_zip_uri": {
      "defaultValue": "",
      "type": "String"
    },
    "ap_function_app_zip_sas_token": {
      "defaultValue": "",
      "type": "String"
    }
  },
  "variables": {
    "tenant_id": "[subscription().tenantId]",
    "subscription_id": "[subscription().subscriptionId]",
    "alertrules_Failure_Anomalies_ap_eu_appInsights_name": "[concat('Failure Anomalies - ', parameters('components_ap_eu_appInsights_name'))]",
    "solutions_LogicAppsManagement_ap_wu_loganalytics_name": "[concat('LogicAppsManagement_', parameters('workspaces_ap_wu_loganalytics_name'))]"
  },
  "resources": [
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2016-02-01-preview",
      "name": "[parameters('accounts_ap_wu_luisapp_name')]",
      "location": "westus2",
      "sku": {
        "name": "S0"
      },
      "kind": "LUIS",
      "properties": {}
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2016-02-01-preview",
      "name": "[parameters('accounts_ap_wu_speech_cognitivesvc_name')]",
      "location": "westus2",
      "sku": {
        "name": "S0"
      },
      "kind": "SpeechServices",
      "properties": {}
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2015-05-01",
      "name": "[parameters('components_ap_eu_appInsights_name')]",
      "location": "eastus",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Redfield",
        "Request_Source": "IbizaAIExtension"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[parameters('vaults_ap_wu_keyvault_name')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_apwustorage_name'))]"
      ],
      "location": "westus2",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Premium"
        },
        "tenantId": "[variables('tenant_id')]",
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false
      }
    },
    {
      "type": "microsoft.operationalinsights/workspaces",
      "apiVersion": "2015-11-01-preview",
      "name": "[parameters('workspaces_ap_wu_loganalytics_name')]",
      "location": "westus2",
      "properties": {
        "source": "Azure",
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[parameters('namespaces_ap_wu_messagingbus_name')]",
      "location": "West US 2",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "properties": {
        "metricId": "[concat('55a24be0-d9c3-4ecd-86b6-566c7aac2512:', parameters('namespaces_ap_wu_messagingbus_name'))]",
        "serviceBusEndpoint": "[concat('https://', parameters('namespaces_ap_wu_messagingbus_name'), '.servicebus.windows.net:443/')]",
        "status": "Active"
      },
      "resources": [
        {
          "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
          "apiVersion": "2017-04-01",
          "name": "[concat(parameters('namespaces_ap_wu_messagingbus_name'), '/RootManageSharedAccessKey')]",
          "location": "West US 2",
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaces_ap_wu_messagingbus_name'))]"
          ],
          "properties": {
            "rights": [
              "Listen",
              "Manage",
              "Send"
            ]
          }
        },
        {
          "type": "Microsoft.ServiceBus/namespaces/queues",
          "apiVersion": "2017-04-01",
          "name": "[concat(parameters('namespaces_ap_wu_messagingbus_name'), '/processing-queue')]",
          "location": "West US 2",
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaces_ap_wu_messagingbus_name'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 5120,
            "requiresDuplicateDetection": true,
            "requiresSession": true,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": true,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT30S",
            "maxDeliveryCount": 10,
            "status": "Active",
            "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Microsoft.ServiceBus/namespaces/queues",
          "apiVersion": "2017-04-01",
          "name": "[concat(parameters('namespaces_ap_wu_messagingbus_name'), '/request-queue')]",
          "location": "West US 2",
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaces_ap_wu_messagingbus_name'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 5120,
            "requiresDuplicateDetection": true,
            "requiresSession": true,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": true,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT30S",
            "maxDeliveryCount": 10,
            "status": "Active",
            "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Microsoft.ServiceBus/namespaces/queues",
          "apiVersion": "2017-04-01",
          "name": "[concat(parameters('namespaces_ap_wu_messagingbus_name'), '/result-queue')]",
          "location": "West US 2",
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', parameters('namespaces_ap_wu_messagingbus_name'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 5120,
            "requiresDuplicateDetection": true,
            "requiresSession": true,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": true,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT30S",
            "maxDeliveryCount": 10,
            "status": "Active",
            "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
            "enablePartitioning": false,
            "enableExpress": false
          }
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "name": "[parameters('storageAccounts_apwustorage_name')]",
      "location": "westus2",
      "sku": {
        "name": "Standard_GRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2018-03-01-preview",
          "name": "default/recordings",
          "dependsOn": [
            "[parameters('storageAccounts_apwustorage_name')]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('servicebus_Connection_Name')]",
      "location": "westus2",
      "properties": {
        "displayName": "[concat('ap-queue-', parameters('servicebus_Connection_Name'))]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', variables('subscription_id'), '/providers/Microsoft.Web/locations/westus2/managedApis/servicebus')]"
        },
        "parameterValues": {
          "connectionString": "[listKeys(resourceId(concat('Microsoft.ServiceBus/namespaces/AuthorizationRules'), parameters('namespaces_ap_wu_messagingbus_name'), 'RootManageSharedAccessKey'), '2015-08-01').primaryConnectionString]"
        }
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[parameters('serverfarms_WestUS2Plan_name')]",
      "location": "West US 2",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "name": "[parameters('serverfarms_WestUS2Plan_name')]",
        "perSiteScaling": false,
        "reserved": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('ap_func_aad_key_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]"
      ],
      "properties": {
        "value": "[parameters('ap_func_aad_key_secret_value')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('ap_func_aad_name_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]"
      ],
      "properties": {
        "value": "[parameters('ap_func_aad_name_secret_value')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('luis_subscription_key_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_ap_wu_luisapp_name'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_ap_wu_luisapp_name')), providers('Microsoft.CognitiveServices', 'accounts').apiVersions[0]).key1]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('speech_api_key_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_ap_wu_speech_cognitivesvc_name'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('accounts_ap_wu_speech_cognitivesvc_name')), providers('Microsoft.CognitiveServices', 'accounts').apiVersions[0]).key1]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('twilioaccountphonenumber_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]"
      ],
      "properties": {
        "value": "[parameters('twilioaccountphonenumber_secret_value')]",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('twilioaccountssid_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]"
      ],
      "properties": {
        "value": "[parameters('twilioaccountssid_secret_value')]",
        "contentType": "",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2016-10-01",
      "name": "[concat(parameters('vaults_ap_wu_keyvault_name'), '/', parameters('twilioaccounttoken_secret_name'))]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('vaults_ap_wu_keyvault_name'))]"
      ],
      "properties": {
        "value": "[parameters('twilioaccounttoken_secret_value')]",
        "contentType": "",
        "attributes": {
          "enabled": true
        }
      }
    },
    {
      "type": "Microsoft.OperationsManagement/solutions",
      "apiVersion": "2015-11-01-preview",
      "name": "[variables('solutions_LogicAppsManagement_ap_wu_loganalytics_name')]",
      "location": "West US 2",
      "dependsOn": [
        "[resourceId('microsoft.operationalinsights/workspaces', parameters('workspaces_ap_wu_loganalytics_name'))]"
      ],
      "plan": {
        "name": "[variables('solutions_LogicAppsManagement_ap_wu_loganalytics_name')]",
        "promotionCode": "",
        "product": "OMSGallery/LogicAppsManagement",
        "publisher": "Microsoft"
      },
      "properties": {
        "workspaceResourceId": "[resourceId('microsoft.operationalinsights/workspaces', parameters('workspaces_ap_wu_loganalytics_name'))]",
        "containedResources": [
          "[concat(resourceId('microsoft.operationalinsights/workspaces', parameters('workspaces_ap_wu_loganalytics_name')), concat('/views/', variables('solutions_LogicAppsManagement_ap_wu_loganalytics_name')))]"
        ]
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2016-08-01",
      "name": "[parameters('sites_ap_wu_func_name')]",
      "location": "West US 2",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_WestUS2Plan_name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_apwustorage_name'))]",
        "[resourceId('microsoft.insights/components/', parameters('components_ap_eu_appInsights_name'))]"
      ],
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(parameters('sites_ap_wu_func_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(parameters('sites_ap_wu_func_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('serverfarms_WestUS2Plan_name'))]",
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccounts_apwustorage_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_apwustorage_name')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccounts_apwustorage_name'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_apwustorage_name')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', parameters('components_ap_eu_appInsights_name'))).InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "MSDEPLOY_RENAME_LOCKED_FILES",
              "value": "1"
            },
            {
              "name": "callFinalPauseInSeconds",
              "value": "45"
            },
            {
              "name": "callInitialPauseInSeconds",
              "value": "0"
            },
            {
              "name": "defaultDtmfTemplate",
              "value": "1ww{inputId}ww1ww1ww1"
            },
            {
              "name": "luisConfiguration",
              "value": "{dateTimeEntityName: \"builtin.datetimeV2.datetime\", dateEntityName: \"builtin.datetimeV2.date\", timeEntityName: \"builtin.datetimeV2.time\", personEntityName: \"builtin.personName\", locationEntityName: \"location\", cityEntityName: \"city\", stateEntityName: \"state\", zipcodeEntityName: \"zipcode\"}"
            },
            {
              "name": "luisEndpoint",
              "value": ""
            },
            {
              "name": "luisSubscriptionKeySecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('luis_subscription_key_secret_name'))]"
            },
            {
              "name": "numberToCall",
              "value": "+18008987180"
            },
            {
              "name": "speechApiKeySecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('speech_api_key_secret_name'))]"
            },
            {
              "name": "speechApiRegion",
              "value": "westus2"
            },
            {
              "name": "storageAccessConnectionString",
              "value": "[concat('BlobEndpoint=https://', parameters('storageAccounts_apwustorage_name'), '.blob.core.windows.net/;QueueEndpoint=https://', parameters('storageAccounts_apwustorage_name'), '.queue.core.windows.net/;FileEndpoint=https://', parameters('storageAccounts_apwustorage_name'), '.file.core.windows.net/;TableEndpoint=https://', parameters('storageAccounts_apwustorage_name'), '.table.core.windows.net/;')]"
            },
            {
              "name": "storageAccessKeySecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('storage_access_key_secret_name'))]"
            },
            {
              "name": "storageContainerName",
              "value": "recordings"
            },
            {
              "name": "storageReadAccessKeySecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('storage_read_access_key_secret_name'))]"
            },
            {
              "name": "twilioAccountSidSecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('twilioaccountssid_secret_name'))]"
            },
            {
              "name": "twilioAuthTokenSecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('twilioaccounttoken_secret_name'))]"
            },
            {
              "name": "twilioLocalNumberSecretName",
              "value": "[concat('https://', parameters('vaults_ap_wu_keyvault_name'), '.vault.azure.net/secrets/', parameters('twilioaccountphonenumber_secret_name'))]"
            },
            {
              "name": "twilioTwiMLTemplate",
              "value": "<?xml version=\"1.0\"?><Response><Pause length=\"{callInitialPauseInSeconds}\"/><Play digits=\"{dtmfSequence}\"/><Pause length=\"{callFinalPauseInSeconds}\"/><Hangup/></Response>"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "MSDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name'))]"
          ],
          "tags": {},
          "properties": {
            "packageUri": "[parameters('ap_function_app_zip_uri')]",
            "dbType": "None",
            "connectionString": ""
          }
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2016-08-01",
      "name": "[concat(parameters('sites_ap_wu_func_name'), '/web')]",
      "location": "West US 2",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name'))]",
        "[concat('Microsoft.Web/Sites/', parameters('sites_ap_wu_func_name'), '/Extensions/MSDeploy')]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php"
        ],
        "netFrameworkVersion": "v4.0",
        "phpVersion": "5.6",
        "pythonVersion": "",
        "nodeVersion": "",
        "linuxFxVersion": "",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "remoteDebuggingVersion": "VS2017",
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$ap-wu-func",
        "scmType": "VSTSRM",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "appCommandLine": "",
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false,
            "virtualDirectories": null
          }
        ],
        "winAuthAdminState": 0,
        "winAuthTenantState": 0,
        "customAppPoolIdentityAdminState": false,
        "customAppPoolIdentityTenantState": false,
        "loadBalancing": "LeastRequests",
        "routingRules": [],
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "vnetName": "",
        "siteAuthEnabled": false,
        "siteAuthSettings": {
          "enabled": null,
          "unauthenticatedClientAction": null,
          "tokenStoreEnabled": null,
          "allowedExternalRedirectUrls": null,
          "defaultProvider": null,
          "clientId": null,
          "clientSecret": null,
          "clientSecretCertificateThumbprint": null,
          "issuer": null,
          "allowedAudiences": null,
          "additionalLoginParams": null,
          "isAadAutoProvisioned": false,
          "googleClientId": null,
          "googleClientSecret": null,
          "googleOAuthScopes": null,
          "facebookAppId": null,
          "facebookAppSecret": null,
          "facebookOAuthScopes": null,
          "twitterConsumerKey": null,
          "twitterConsumerSecret": null,
          "microsoftAccountClientId": null,
          "microsoftAccountClientSecret": null,
          "microsoftAccountOAuthScopes": null
        },
        "cors": {
          "allowedOrigins": [
            "https://functions.azure.com",
            "https://functions-staging.azure.com",
            "https://functions-next.azure.com"
          ],
          "supportCredentials": false
        },
        "localMySqlEnabled": false,
        "managedServiceIdentityId": 50582,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2016-08-01",
      "name": "[concat(parameters('sites_ap_wu_func_name'), '/', parameters('sites_ap_wu_func_name'), '.azurewebsites.net')]",
      "location": "West US 2",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name'))]",
        "[concat('Microsoft.Web/Sites/', parameters('sites_ap_wu_func_name'), '/Extensions/MSDeploy')]"
      ],
      "properties": {
        "siteName": "[parameters('sites_ap_wu_func_name')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('workflows_ap_process_wu_logicapp_name')]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('servicebus_Connection_Name'))]",
        "MSDeploy"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Complete_the_Message_In_Queue_For_Everything_Failed": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                  }
                },
                "method": "delete",
                "path": "/@{encodeURIComponent(encodeURIComponent('processing-queue'))}/messages/complete",
                "queries": {
                  "lockToken": "@triggerBody()?['LockToken']",
                  "queueType": "Main",
                  "sessionId": "@triggerBody()?['SessionId']"
                }
              },
              "runAfter": {
                "Send_Everything_Failed_Error_Message_To_Results_Queue": [
                  "Succeeded"
                ]
              }
            },
            "Compose_Everything_Failed_Error_Result_Message": {
              "type": "Compose",
              "inputs": {
                "data": null,
                "errorCode": 4000,
                "errorDetails": "Unhandled Proccessing Error Occured. Please Validate your request information and re-submit if applicable",
                "hasError": "@true",
                "inputId": "@json(decodeBase64(triggerBody()?['ContentData']))?['inputId']",
                "recordId": "@json(decodeBase64(triggerBody()?['ContentData']))?['recordId']",
                "requestType": "@json(decodeBase64(triggerBody()?['ContentData']))?['requestType']"
              },
              "runAfter": {
                "Processing_Scope": [
                  "Failed"
                ]
              }
            },
            "DeleteRecordings_Everything_Failed": {
              "type": "Function",
              "inputs": {
                "body": "@body('CheckCallProgress')",
                "method": "POST",
                "headers": {
                  "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                },
                "function": {
                  "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/DeleteRecordings')]"
                }
              },
              "runAfter": {
                "Complete_the_Message_In_Queue_For_Everything_Failed": [
                  "Succeeded"
                ]
              }
            },
            "Get_AAD_Token": {
              "type": "Http",
              "inputs": {
                "method": "POST",
                "uri": "https://login.microsoftonline.com/@{variables('AADTenantID')}/oauth2/token",
                "headers": {
                  "Content-Type": "application/x-www-form-urlencoded"
                },
                "body": "grant_type=client_credentials&client_id=@{variables('AADClientID')}&resource=@{variables('AADAudience')}&client_secret=@{body('Get_Vault_Secret')?['value']}"
              },
              "runAfter": {
                "Get_Vault_Secret": [
                  "Succeeded"
                ]
              }
            },
            "Get_Vault_Secret": {
              "type": "Http",
              "inputs": {
                "method": "GET",
                "uri": "[concat('https://@{variables(''KeyVaultName'')}.vault.azure.net/secrets/', parameters('ap_func_aad_key_secret_name'))]",
                "queries": {
                  "api-version": "2016-10-01"
                },
                "authentication": {
                  "type": "ManagedServiceIdentity",
                  "audience": "https://vault.azure.net"
                }
              },
              "runAfter": {
                "Init_Unique_ID": [
                  "Succeeded"
                ]
              }
            },
            "Init_AAD_Audience": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AADAudience",
                    "type": "String",
                    "value": "@{parameters('$aadAudience')}"
                  }
                ]
              },
              "runAfter": {
                "Init_AAD_Client_ID": [
                  "Succeeded"
                ]
              }
            },
            "Init_AAD_Client_ID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AADClientID",
                    "type": "String",
                    "value": "@{parameters('$aadClientId')}"
                  }
                ]
              },
              "runAfter": {
                "Init_AAD_Tenant_ID": [
                  "Succeeded"
                ]
              }
            },
            "Init_AAD_Tenant_ID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AADTenantID",
                    "type": "String",
                    "value": "@{parameters('$aadTenantId')}"
                  }
                ]
              },
              "runAfter": {}
            },
            "Init_Key_Vault_Name": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "KeyVaultName",
                    "type": "String",
                    "value": "@{parameters('$keyVaultName')}"
                  }
                ]
              },
              "runAfter": {
                "Init_AAD_Audience": [
                  "Succeeded"
                ]
              }
            },
            "Init_Request_Payload": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RequestPayload",
                    "type": "Object",
                    "value": "@json(decodeBase64(triggerBody()?['ContentData']))"
                  }
                ]
              },
              "runAfter": {
                "Init_Key_Vault_Name": [
                  "Succeeded"
                ]
              }
            },
            "Init_Unique_ID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "UniqueID",
                    "type": "String",
                    "value": "@{guid()}"
                  }
                ]
              },
              "runAfter": {
                "Init_Request_Payload": [
                  "Succeeded"
                ]
              }
            },
            "Processing_Scope": {
              "type": "Scope",
              "actions": {
                "Condition_Call_completed_successfully": {
                  "type": "If",
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@outputs('CheckCallProgress')['statusCode']",
                          200
                        ]
                      },
                      {
                        "equals": [
                          "@body('CheckCallProgress')?['hasError']",
                          "@false"
                        ]
                      },
                      {
                        "equals": [
                          "@body('CheckCallProgress')?['status']",
                          "completed"
                        ]
                      }
                    ]
                  },
                  "actions": {
                    "Complete_the_message_in_a_queue": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                          }
                        },
                        "method": "delete",
                        "path": "/@{encodeURIComponent(encodeURIComponent('processing-queue'))}/messages/complete",
                        "queries": {
                          "lockToken": "@triggerBody()?['LockToken']",
                          "queueType": "Main",
                          "sessionId": "@triggerBody()?['SessionId']"
                        }
                      },
                      "runAfter": {
                        "DeleteRecordings": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Condition_Check_Call_Duration": {
                      "type": "If",
                      "expression": {
                        "or": [
                          {
                            "greaterOrEquals": [
                              "@body('CheckCallProgress')?['duration']",
                              45
                            ]
                          },
                          {
                            "equals": [
                              "@equals(variables('RequestPayload')?['requestPayload']?['callRetried'],null)",
                              "@false"
                            ]
                          }
                        ]
                      },
                      "actions": {
                        "Compose_Add_RecordId": {
                          "type": "Compose",
                          "inputs": "@addProperty(addProperty(body('ExtractInfo'),'recordId',variables('RequestPayload')?['recordId']),'inputId',variables('RequestPayload')?['inputId'])",
                          "runAfter": {
                            "ExtractInfo": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Compose_Result_Message": {
                          "type": "Compose",
                          "inputs": "@addProperty(addProperty(outputs('Compose_Add_RecordId'),'recordingSAS',body('PullRecording')?['fullRecordingUrl']),'requestType',variables('RequestPayload')?['requestType'])",
                          "runAfter": {
                            "Compose_Add_RecordId": [
                              "Succeeded"
                            ]
                          }
                        },
                        "ExtractInfo": {
                          "type": "Function",
                          "inputs": {
                            "body": "@body('TranscribeCall')",
                            "method": "POST",
                            "headers": {
                              "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                            },
                            "function": {
                              "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/ExtractInfo')]"
                            }
                          },
                          "runAfter": {
                            "TranscribeCall": [
                              "Succeeded"
                            ]
                          }
                        },
                        "PullRecording": {
                          "type": "Function",
                          "inputs": {
                            "body": "@variables('RequestPayload')",
                            "method": "POST",
                            "headers": {
                              "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                            },
                            "function": {
                              "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/PullRecording')]"
                            }
                          },
                          "runAfter": {}
                        },
                        "Send_extracted_entities_to_result_queue": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                              }
                            },
                            "method": "post",
                            "body": {
                              "SessionId": "0",
                              "ContentData": "@{base64(outputs('Compose_Result_Message'))}",
                              "ContentType": "application/json",
                              "MessageId": "@variables('UniqueID')"
                            },
                            "path": "/@{encodeURIComponent(encodeURIComponent('result-queue'))}/messages",
                            "queries": {
                              "systemProperties": "None"
                            }
                          },
                          "runAfter": {
                            "Compose_Result_Message": [
                              "Succeeded"
                            ]
                          }
                        },
                        "TranscribeCall": {
                          "type": "Function",
                          "inputs": {
                            "body": "@body('PullRecording')",
                            "method": "POST",
                            "headers": {
                              "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                            },
                            "function": {
                              "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/TranscribeCall')]"
                            }
                          },
                          "runAfter": {
                            "PullRecording": [
                              "Succeeded"
                            ]
                          }
                        }
                      },
                      "runAfter": {},
                      "else": {
                        "actions": {
                          "Compose_Call_Retry_Request": {
                            "type": "Compose",
                            "inputs": "@addProperty(variables('RequestPayload')['requestPayload'],'callRetried',true)",
                            "runAfter": {}
                          },
                          "Send_Message_Request_Queue_For_Retry": {
                            "type": "ApiConnection",
                            "inputs": {
                              "host": {
                                "connection": {
                                  "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                                }
                              },
                              "method": "post",
                              "body": {
                                "SessionId": "0",
                                "ContentData": "@{base64(outputs('Compose_Call_Retry_Request'))}",
                                "ContentType": "application/json"
                              },
                              "path": "/@{encodeURIComponent(encodeURIComponent('request-queue'))}/messages",
                              "queries": {
                                "systemProperties": "None"
                              }
                            },
                            "runAfter": {
                              "Compose_Call_Retry_Request": [
                                "Succeeded"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "DeleteRecordings": {
                      "type": "Function",
                      "inputs": {
                        "body": "@body('CheckCallProgress')",
                        "method": "POST",
                        "headers": {
                          "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                        },
                        "function": {
                          "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/DeleteRecordings')]"
                        }
                      },
                      "runAfter": {
                        "Condition_Check_Call_Duration": [
                          "Succeeded"
                        ]
                      }
                    }
                  },
                  "runAfter": {},
                  "else": {
                    "actions": {
                      "Complete_Error_Message_in_Queue": {
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                            }
                          },
                          "method": "delete",
                          "path": "/@{encodeURIComponent(encodeURIComponent('processing-queue'))}/messages/complete",
                          "queries": {
                            "lockToken": "@triggerBody()?['LockToken']",
                            "queueType": "Main",
                            "sessionId": "0"
                          }
                        },
                        "runAfter": {
                          "Send_error_message_to_results_queue": [
                            "Succeeded"
                          ]
                        }
                      },
                      "Compose_Error_Result_Message": {
                        "type": "Compose",
                        "inputs": "@addProperty(addProperty(addProperty(body('CheckCallProgress'),'recordId',variables('RequestPayload')?['recordId']),'inputId',variables('RequestPayload')?['inputId']),'requestType',variables('RequestPayload')?['requestType'])",
                        "runAfter": {
                          "DeleteRecordings_In_Error": [
                            "Succeeded",
                            "Failed",
                            "TimedOut"
                          ]
                        }
                      },
                      "DeleteRecordings_In_Error": {
                        "type": "Function",
                        "inputs": {
                          "body": "@json(decodeBase64(triggerBody()?['ContentData']))['callSid']",
                          "method": "POST",
                          "headers": {
                            "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                          },
                          "function": {
                            "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/DeleteRecordings')]"
                          }
                        },
                        "runAfter": {}
                      },
                      "Send_error_message_to_results_queue": {
                        "type": "ApiConnection",
                        "inputs": {
                          "host": {
                            "connection": {
                              "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                            }
                          },
                          "method": "post",
                          "body": {
                            "SessionId": "0",
                            "ContentData": "@{base64(outputs('Compose_Error_Result_Message'))}",
                            "ContentType": "application/json",
                            "MessageId": "@variables('UniqueID')"
                          },
                          "path": "/@{encodeURIComponent(encodeURIComponent('result-queue'))}/messages",
                          "queries": {
                            "systemProperties": "None"
                          }
                        },
                        "runAfter": {
                          "Compose_Error_Result_Message": [
                            "Succeeded"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "runAfter": {
                "Until_Call_Completed": [
                  "Succeeded"
                ]
              }
            },
            "Send_Everything_Failed_Error_Message_To_Results_Queue": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                  }
                },
                "method": "post",
                "body": {
                  "SessionId": "@triggerBody()?['SessionId']",
                  "ContentData": "@{base64(outputs('Compose_Everything_Failed_Error_Result_Message'))}",
                  "ContentType": "application/json"
                },
                "path": "/@{encodeURIComponent(encodeURIComponent('result-queue'))}/messages",
                "queries": {
                  "systemProperties": "None"
                }
              },
              "runAfter": {
                "Compose_Everything_Failed_Error_Result_Message": [
                  "Succeeded"
                ]
              }
            },
            "Until_Call_Completed": {
              "type": "Until",
              "expression": "@equals(body('CheckCallProgress')?['status'], 'completed')",
              "limit": {
                "count": 5,
                "timeout": "PT1H"
              },
              "actions": {
                "CheckCallProgress": {
                  "type": "Function",
                  "inputs": {
                    "body": "@variables('RequestPayload')",
                    "method": "POST",
                    "headers": {
                      "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                    },
                    "function": {
                      "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/CheckCallProgress')]"
                    }
                  },
                  "runAfter": {
                    "Delay": [
                      "Succeeded"
                    ]
                  }
                },
                "Delay": {
                  "type": "Wait",
                  "inputs": {
                    "interval": {
                      "count": 30,
                      "unit": "Second"
                    }
                  },
                  "runAfter": {}
                },
                "Renew_lock_on_the_session_in_a_queue": {
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                      }
                    },
                    "method": "post",
                    "path": "/@{encodeURIComponent(encodeURIComponent('processing-queue'))}/sessions/@{encodeURIComponent(triggerBody()?['SessionId'])}/renewlock"
                  },
                  "runAfter": {
                    "CheckCallProgress": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "runAfter": {
                "Get_AAD_Token": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "$aadAudience": {
              "defaultValue": "[parameters('aadaudience_variable')]",
              "type": "String"
            },
            "$aadClientId": {
              "defaultValue": "[parameters('aadclientid_variable')]",
              "type": "String"
            },
            "$aadTenantId": {
              "defaultValue": "[variables('tenant_id')]",
              "type": "String"
            },
            "$keyVaultName": {
              "defaultValue": "[parameters('vaults_ap_wu_keyvault_name')]",
              "type": "String"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_queue_(peek-lock)": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent(encodeURIComponent('processing-queue'))}/messages/head/peek",
                "queries": {
                  "queueType": "Main",
                  "sessionId": "0"
                }
              },
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "[parameters('servicebus_Connection_Name')]": {
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('servicebus_Connection_Name'))]",
                "connectionName": "[parameters('servicebus_Connection_Name')]",
                "id": "[concat('/subscriptions/', variables('subscription_id'), '/providers/Microsoft.Web/locations/westus2/managedApis/servicebus')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('workflows_ap_request_wu_logicapp_name')]",
      "location": "westus2",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('servicebus_Connection_Name'))]",
        "MSDeploy"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Condition_Messages_Found": {
              "type": "If",
              "expression": {
                "and": [
                  {
                    "not": {
                      "equals": [
                        "@length(body('Get_messages_from_request_queue_(peek-lock)'))",
                        0
                      ]
                    }
                  }
                ]
              },
              "actions": {
                "For_each_queue_message": {
                  "type": "Foreach",
                  "foreach": "@body('Get_messages_from_request_queue_(peek-lock)')",
                  "actions": {
                    "Complete_the_Message_In_Queue_For_Everything_Failed": {
                      "runAfter": {
                        "Send_Everything_Failed_Error_Message_To_Result_Queue": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                          }
                        },
                        "method": "delete",
                        "path": "/@{encodeURIComponent(encodeURIComponent('request-queue'))}/messages/complete",
                        "queries": {
                          "lockToken": "@items('For_each_queue_message')?['LockToken']",
                          "queueType": "Main",
                          "sessionId": "@items('For_each_queue_message')?['SessionId']"
                        }
                      }
                    },
                    "Compose_Everything_Failed_Error_Result_Message": {
                      "type": "Compose",
                      "inputs": {
                        "data": null,
                        "errorCode": 4000,
                        "errorDetails": "Unhandled Proccessing Error Occured On Initial Call Process. Please Validate your request information and re-submit if applicable",
                        "hasError": "@true",
                        "inputId": "@json(decodeBase64(items('For_each_queue_message')?['ContentData']))?['inputId']",
                        "recordId": "@json(decodeBase64(items('For_each_queue_message')?['ContentData']))?['recordId']",
                        "requestType": "@json(decodeBase64(items('For_each_queue_message')?['ContentData']))?['requestType']"
                      },
                      "runAfter": {
                        "Processing_Scope": [
                          "Failed"
                        ]
                      }
                    },
                    "Processing_Scope": {
                      "type": "Scope",
                      "actions": {
                        "Condition_-_Call_Initiated": {
                          "type": "If",
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('Initiate_Call')['statusCode']",
                                  200
                                ]
                              },
                              {
                                "equals": [
                                  "@body('Initiate_Call')?['hasError']",
                                  "@false"
                                ]
                              }
                            ]
                          },
                          "actions": {
                            "Complete_the_message_in_a_queue": {
                              "runAfter": {
                                "Send_message_to_processing_queue": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                                  }
                                },
                                "method": "delete",
                                "path": "/@{encodeURIComponent(encodeURIComponent('request-queue'))}/messages/complete",
                                "queries": {
                                  "lockToken": "@items('For_each_queue_message')?['LockToken']",
                                  "queueType": "Main",
                                  "sessionId": "@items('For_each_queue_message')?['SessionId']"
                                }
                              }
                            },
                            "Compose_Add_Original_Request_to_Processing_Message": {
                              "type": "Compose",
                              "inputs": "@addProperty(outputs('Compose_Processing_Message'),'requestPayload',body('Parse_JSON_Request_Payload'))",
                              "runAfter": {
                                "Compose_Processing_Message": [
                                  "Succeeded"
                                ]
                              }
                            },
                            "Compose_Processing_Message": {
                              "type": "Compose",
                              "inputs": "@addProperty(addProperty(body('Initiate_Call'),'recordId',body('Parse_JSON_Request_Payload')?['recordId']),'requestType',body('Parse_JSON_Request_Payload')?['requestType'])",
                              "runAfter": {}
                            },
                            "Send_message_to_processing_queue": {
                              "runAfter": {
                                "Compose_Add_Original_Request_to_Processing_Message": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "ContentData": "@{base64(outputs('Compose_Add_Original_Request_to_Processing_Message'))}",
                                  "ContentType": "application/json",
                                  "SessionId": "0"
                                },
                                "host": {
                                  "connection": {
                                    "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                                  }
                                },
                                "method": "post",
                                "path": "/@{encodeURIComponent(encodeURIComponent('processing-queue'))}/messages",
                                "queries": {
                                  "systemProperties": "None"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Initiate_Call": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Complete_Error_Message_In_Queue": {
                                "runAfter": {
                                  "Send_Error_Message_To_Result_Queue": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "ApiConnection",
                                "inputs": {
                                  "host": {
                                    "connection": {
                                      "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                                    }
                                  },
                                  "method": "delete",
                                  "path": "/@{encodeURIComponent(encodeURIComponent('request-queue'))}/messages/complete",
                                  "queries": {
                                    "lockToken": "@items('For_each_queue_message')?['LockToken']",
                                    "queueType": "Main",
                                    "sessionId": "@items('For_each_queue_message')?['SessionId']"
                                  }
                                }
                              },
                              "Compose_Error_Result_Message": {
                                "type": "Compose",
                                "inputs": "@addProperty(addProperty(body('Initiate_Call'),'recordId',body('Parse_JSON_Request_Payload')?['recordId']),'requestType',body('Parse_JSON_Request_Payload')?['requestType'])",
                                "runAfter": {}
                              },
                              "Send_Error_Message_To_Result_Queue": {
                                "runAfter": {
                                  "Compose_Error_Result_Message": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "ApiConnection",
                                "inputs": {
                                  "body": {
                                    "ContentData": "@{base64(outputs('Compose_Error_Result_Message'))}",
                                    "ContentType": "application/json",
                                    "SessionId": "0"
                                  },
                                  "host": {
                                    "connection": {
                                      "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                                    }
                                  },
                                  "method": "post",
                                  "path": "/@{encodeURIComponent(encodeURIComponent('result-queue'))}/messages",
                                  "queries": {
                                    "systemProperties": "None"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "Delay": {
                          "type": "Wait",
                          "inputs": {
                            "interval": {
                              "count": 30,
                              "unit": "Second"
                            }
                          },
                          "runAfter": {
                            "Condition_-_Call_Initiated": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Get_AAD_Token": {
                          "type": "Http",
                          "inputs": {
                            "method": "POST",
                            "uri": "https://login.microsoftonline.com/@{variables('AADTenantID')}/oauth2/token",
                            "headers": {
                              "Content-Type": "application/x-www-form-urlencoded"
                            },
                            "body": "grant_type=client_credentials&client_id=@{variables('AADClientID')}&resource=@{variables('AADAudience')}&client_secret=@{encodeURIComponent(body('Get_Vault_Secret')?['value'])}"
                          },
                          "runAfter": {
                            "Get_Vault_Secret": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Get_Vault_Secret": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "[concat('https://@{variables(''KeyVaultName'')}.vault.azure.net/secrets/', parameters('ap_func_aad_key_secret_name'))]",
                            "queries": {
                              "api-version": "2016-10-01"
                            },
                            "authentication": {
                              "type": "ManagedServiceIdentity",
                              "audience": "https://vault.azure.net"
                            }
                          },
                          "runAfter": {
                            "Parse_JSON_Request_Payload": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Initiate_Call": {
                          "type": "Function",
                          "inputs": {
                            "body": "@body('Parse_JSON_Request_Payload')",
                            "method": "POST",
                            "headers": {
                              "Authorization": "@{concat('Bearer ',body('Get_AAD_Token')?['access_token'])}"
                            },
                            "function": {
                              "id": "[concat(resourceId('Microsoft.Web/sites', parameters('sites_ap_wu_func_name')), '/functions/InitiateCall')]"
                            }
                          },
                          "runAfter": {
                            "Get_AAD_Token": [
                              "Succeeded"
                            ]
                          }
                        },
                        "Parse_JSON_Request_Payload": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@decodeBase64(items('For_each_queue_message')?['ContentData'])",
                            "schema": {
                              "properties": {
                                "dtmf": {
                                  "properties": {
                                    "dtmf": {
                                      "type": "string"
                                    },
                                    "finalPause": {
                                      "type": "integer"
                                    },
                                    "initPause": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "inputId": {
                                  "type": "string"
                                },
                                "recordId": {
                                  "type": "string"
                                },
                                "requestType": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          },
                          "runAfter": {}
                        }
                      },
                      "runAfter": {}
                    },
                    "Send_Everything_Failed_Error_Message_To_Result_Queue": {
                      "runAfter": {
                        "Compose_Everything_Failed_Error_Result_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "ContentData": "@{base64(outputs('Compose_Everything_Failed_Error_Result_Message'))}",
                          "ContentType": "application/json",
                          "SessionId": "@items('For_each_queue_message')?['SessionId']"
                        },
                        "host": {
                          "connection": {
                            "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                          }
                        },
                        "method": "post",
                        "path": "/@{encodeURIComponent(encodeURIComponent('result-queue'))}/messages",
                        "queries": {
                          "systemProperties": "None"
                        }
                      }
                    }
                  },
                  "runAfter": {},
                  "runtimeConfiguration": {
                    "concurrency": {
                      "repetitions": 1
                    }
                  }
                }
              },
              "runAfter": {
                "Init_Key_Vault_Name": [
                  "Succeeded"
                ]
              }
            },
            "Get_messages_from_request_queue_(peek-lock)": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "[concat('@parameters(''$connections'')[''', parameters('servicebus_Connection_Name'), '''][''connectionId'']')]"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent(encodeURIComponent('request-queue'))}/messages/batch/peek",
                "queries": {
                  "maxMessageCount": 10,
                  "queueType": "Main",
                  "sessionId": "0"
                }
              }
            },
            "Init_AAD_Audience": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AADAudience",
                    "type": "String",
                    "value": "@{parameters('$aadAudience')}"
                  }
                ]
              },
              "runAfter": {
                "Init_AAD_Client_ID": [
                  "Succeeded"
                ]
              }
            },
            "Init_AAD_Client_ID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AADClientID",
                    "type": "String",
                    "value": "@{parameters('$aadClientId')}"
                  }
                ]
              },
              "runAfter": {
                "Init_AAD_Tenant_ID": [
                  "Succeeded"
                ]
              }
            },
            "Init_AAD_Tenant_ID": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AADTenantID",
                    "type": "String",
                    "value": "@{parameters('$aadTenantId')}"
                  }
                ]
              },
              "runAfter": {
                "Get_messages_from_request_queue_(peek-lock)": [
                  "Succeeded"
                ]
              }
            },
            "Init_Key_Vault_Name": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "KeyVaultName",
                    "type": "String",
                    "value": "@{parameters('$keyVaultName')}"
                  }
                ]
              },
              "runAfter": {
                "Init_AAD_Audience": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "$aadAudience": {
              "defaultValue": "[parameters('aadaudience_variable')]",
              "type": "String"
            },
            "$aadClientId": {
              "defaultValue": "[parameters('aadclientid_variable')]",
              "type": "String"
            },
            "$aadTenantId": {
              "defaultValue": "[variables('tenant_id')]",
              "type": "String"
            },
            "$keyVaultName": {
              "defaultValue": "[parameters('vaults_ap_wu_keyvault_name')]",
              "type": "String"
            }
          },
          "triggers": {
            "Recurrence": {
              "type": "Recurrence",
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "[parameters('servicebus_Connection_Name')]": {
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('servicebus_Connection_Name'))]",
                "connectionName": "[parameters('servicebus_Connection_Name')]",
                "id": "[concat('/subscriptions/', variables('subscription_id'), '/providers/Microsoft.Web/locations/westus2/managedApis/servicebus')]"
              }
            }
          }
        }
      }
    }
  ]
}
